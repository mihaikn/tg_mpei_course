https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/
class Solution {
public:
	pair<int, int> findMaxDiff(TreeNode* root, int& max_diff) {
		if (!root)
			return make_pair(INT_MIN, INT_MAX);

		pair<int, int> left = findMaxDiff(root->left, max_diff);
		pair<int, int> right = findMaxDiff(root->right, max_diff);
		if (root->left || root->right) {
			int diff = INT_MIN;
			if (left.first != INT_MIN)
				diff = max(diff, abs(root->val - left.first));

			if (left.second != INT_MAX)
				diff = max(diff, abs(root->val - left.second));

			if (right.first != INT_MIN)
				diff = max(diff, abs(root->val - right.first));

			if (right.second != INT_MAX)
				diff = max(diff, abs(root->val - right.second));

			max_diff = max(max_diff, diff);
		}
		int min_node = min({ left.second, right.second, root->val });
		int max_node = max({ left.first, right.first, root->val });
		return make_pair(max_node, min_node);
	}

	int max_Ancestor_Diff(TreeNode* root) {
		int max_diff = numeric_limits<int> ::min();

		pair<int, int> max_min;
		findMaxDiff(root, max_diff);
		return max_diff;
	}
};