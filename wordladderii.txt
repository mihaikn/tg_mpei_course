https://leetcode.com/problems/word-ladder-ii/
class Solution {
private:
     vector<vector<string>> result;
     unordered_map<string, unordered_set<string>> graph; 
     unordered_map<string, int> level;
    
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        wordList.push_back(beginWord);
        int n=wordList.size();
        for(int i=0 ; i<n; i++) {
            for(int j=i+1; j<n; j++) {
                if(is_diff_one(wordList[i], wordList[j])) {
                    graph[wordList[i]].insert(wordList[j]);
                    graph[wordList[j]].insert(wordList[i]);
                }
            }
        }
        unordered_set<string> visited;
        visited.insert(beginWord);
        level[beginWord] = 0;
        queue<string> q;
		q.push(beginWord);
		while(!q.empty()) {
			string v = q.front();
			q.pop();
            for(auto u : graph[v]) {
                if(visited.count(u) == 0) {
                    visited.insert(u);
                    level[u] = level[v]+1; 
                    q.push(u);
                }
            }
        }
        visited.clear();
        vector<string> temp = {beginWord};
        for(auto u : graph[beginWord]) {
            temp.push_back(u);
            visited.insert(u);
            dfs(u, temp, visited, endWord);
            temp.pop_back();
        }
        return result;
    }
     
    bool is_diff_one(string a, string b) {
        if(a.size() != b.size())
            return false;
        int cnt = 0;
        for(int i=0; i<a.size(); i++) {
            if(a[i] != b[i])
                cnt++;
            if(cnt>1)
                return false;
        }
        return cnt == 1;
    }
    
    void dfs(string curr, vector<string>& temp, unordered_set<string>& visited, string endWord) {
        if(curr == endWord) {
            result.push_back(temp);
            return;
        }
        for(auto u : graph[curr]) {
            if(!visited.count(u) && level[curr]+1 == level[u]) {
                visited.insert(u);
                temp.push_back(u);
                dfs(u,temp, visited, endWord);
                temp.pop_back();
                visited.erase(visited.find(u));
            }
        }
    }
};