https://leetcode.com/problems/top-k-frequent-elements/
struct compare{
    bool operator()(pair<int, int> & a, pair<int, int> & b){
        return a.second < b.second;
    }
};

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> m;
        
        for(auto i : nums) m[i]++;
        
        priority_queue<pair<int, int>, vector<pair<int,int>>, compare> pq;
        
        for(auto t : m) pq.push({t.first, t.second});
        
        vector<int> res;
        
        for(int i = 0 ; i < k ; i++){
            res.push_back(pq.top().first);
            pq.pop();
        }
         
        return res;
    }
};