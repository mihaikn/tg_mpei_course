https://leetcode.com/problems/course-schedule/
struct Node {
    int course;
    unordered_set<Node*> outEdge;
    int inDegree;
    Node( int course ) : course( course ), inDegree(0) {}
};

class Solution {
public:
    bool canFinish( int numCourses, vector<vector<int>> &prerequisites ) {
        vector<Node*> nodes;
        for( int i=0; i < numCourses; i++ ) {
            nodes.push_back( new Node( i ) );
        }

        for( auto edge : prerequisites ) {
            nodes[ edge[1] ]->outEdge.insert( nodes[ edge[0] ] );
            nodes[ edge[0] ]->inDegree++;
        }
        
        // queue has nodes with inDegree = 0
        queue<Node*> q;
        for( auto node : nodes ) {
            if( node->inDegree == 0 ) {
                q.push( node );
            }
        }
        
        int visitedCount = 0;
        Node *curr = NULL;
        while( !q.empty() ) {
            curr = q.front(); q.pop();
            for( auto neighbour : curr->outEdge ) {
                --neighbour->inDegree;
                if( neighbour->inDegree == 0 ) {
                    q.push( neighbour );
                }
            }
            visitedCount++;
        }
        if( visitedCount == numCourses ) {
            return true;
        }
        return false;
    }
};